# 워크플로우의 이름을 지정합니다.
name: Deploy to Dev Server

# 워크플로우가 실행될 이벤트를 정의합니다.
on:
  # 'pull_request' 이벤트가 발생했을 때 실행됩니다.
  pull_request:
    # 'develop' 브랜치를 대상으로 하는 Pull Request에만 적용됩니다.
    branches: [ develop ]
    # Pull Request가 'closed'(닫혔을 때) 상태일 때만 실행됩니다.
    types: [ closed ]

# 워크플로우에 포함될 작업(Job)들을 정의합니다.
jobs:
  # 'deploy'라는 이름의 작업을 정의합니다.
  deploy:
    #이 작업의 실행 조건을 정의합니다.
    # Pull Request가 'merged'(병합)된 상태로 닫혔을 경우에만 이 작업을 실행합니다.
    if: github.event.pull_request.merged == true

    # 이 작업이 실행될 가상 환경을 지정합니다. (최신 우분투)
    runs-on: ubuntu-latest

    # 작업의 단계(Step)들을 순서대로 정의합니다.
    steps:
      # 1. GitHub 리포지토리의 코드를 워크플로우 러너(Runner)로 가져옵니다.
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. GitHub Container Registry(GHCR)에 로그인합니다.
      # GitHub 리포지토리에 저장된 GITHUB_TOKEN을 사용하여 인증합니다.
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 3. Dockerfile을 사용하여 이미지를 빌드하고 GHCR에 푸시합니다.
      # 'docker/build-push-action'을 사용하여 빌드와 푸시를 최적화합니다.
      - name: Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/gyeonggi-partners:dev

      # 4. docker-compose.dev.yml 파일을 EC2 서버로 복사합니다.
      # 'appleboy/scp-action'을 사용하여 안전하게 파일을 전송합니다.
      - name: Copy docker-compose file to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "docker-compose.dev.yml" # <-- 실제 파일 경로로 수정해주세요.
          target: "~/gyeonggi_partners"

      # 5. EC2 서버에 접속하여 배포 스크립트를 실행합니다.
      # 'appleboy/ssh-action'을 사용하여 원격 명령어를 실행합니다.
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # 프로젝트 디렉토리로 이동합니다.
            cd ~/gyeonggi_partners
            
            # GHCR에 로그인하여 private 이미지를 pull 받을 수 있도록 합니다.
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # docker-compose.dev.yml 파일로 최신 이미지를 pull 받습니다.
            docker-compose -f docker-compose.dev.yml pull
            
            # 컨테이너를 강제로 재생성하여 중단 없이 서비스를 업데이트합니다.
            docker-compose -f docker-compose.dev.yml up -d --force-recreate
            
            # 사용하지 않는 Docker 이미지를 정리하여 서버 용량을 확보합니다.
            docker image prune -f